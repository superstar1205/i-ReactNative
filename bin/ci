#! /bin/bash

#################### Running this Script #######################
# Verify Git status is clean
# Run this with `./bin/ci`
################################################################

SOMETHING_FAILED=0
echo "#########################################################"
echo '# Test a release of Ignite before actually releasing it #'
echo '#                  ._______.                            #'
echo '#                   | \   / |                           #'
echo '#                .--|.O.|.O.|______.                    #'
echo '#              __).-| = | = |/   \ |                    #'
echo "#              >__) (.'---\`.)Q.|.Q.|--.                 #"
echo '#                    \\___// = | = |-.(__               #'
echo "#                     \`---'( .---. ) (__<               #"
echo "#                           \\\\.-.//                     #"
echo "#                            \`---'                      #"
echo '#########################################################'

IGNITE_DIRECTORY=$PWD

# Runs command and on failure turns on the SOMETHING_FAILED flag
function test_command {
  "$@"
  local status=$?
  if [ $status -ne 0 ]; then
      echo "üëé üëé üëé üëé üëé üëé üëé üëé - $1 Failed" >&2
      SOMETHING_FAILED=$1
  fi
  return $status
}

setup()
{
  echo '~~~üåü NPM install'
  test_command npm install

  echo '~~~üåü Linking local for Testing'
  test_command npm link

}

verify_code()
{
  echo '~~~üåü Checking Code'
  npm install -g standard
  npm install -g ava
  npm i -g react-native-cli
  test_command standard ./src
  test_command npm test
  test_command npm run integration
}

check_builds()
{
  # Make a temporary directory and jump into it
  cd $(mktemp -d)

  echo '~~~üåü Generating Project'
  test_command ignite new TestProj --min --skip-git --overwrite

  echo '~~~üåü Checking Builds'
  cd ./TestProj

  if [ ! -d "android" ]; then
    echo 'Android folder did not generate'
    SOMETHING_FAILED=1
  fi

  if [ ! -d "ios" ]; then
    echo 'ios folder did not generate'
    SOMETHING_FAILED=1
  fi

  echo 'Testing Blessed Plugins'
  echo '~ Test adding vector-icons plugin from npm'
  test_command ignite add vector-icons
  echo '~ Test adding animatable plugin from npm'
  test_command ignite add animatable
  echo '~ Test adding i18n plugin from npm'
  test_command ignite add i18n
  echo '~ Test adding maps plugin from npm'
  test_command ignite add maps

  echo '~ Test Generators'
  test_command ignite g component PizzaItem
  test_command ignite g screen PizzaLocation
  test_command ignite g container PizzaMenu
  test_command ignite g redux PizzaFeatures
  test_command ignite g saga PizzaDelivered
  test_command ignite g listview PizzaPlaces1 --type Row --dataType Single
  test_command ignite g listview PizzaPlaces2 --type Grid --dataType Single
  test_command ignite g listview PizzaPlaces3 --type Row --dataType Sectioned
  test_command ignite g listview PizzaPlaces4 --type Grid --dataType Sectioned

  echo '~ LINT ALL THE THINGS!'
  test_command npm run lint

  echo '~ Build ios'
  test_command react-native bundle --entry-file index.ios.js --bundle-output test.ios.js --dev false --platform ios --assets-dest iosAssets
  if [ ! -d "iosAssets" ]; then
    echo 'iosAssets folder did not generate'
    SOMETHING_FAILED=1
  fi

  echo '~ Build android'
  test_command react-native bundle --entry-file index.android.js --bundle-output test.android.js --dev false --platform android --assets-dest androidAssets
  if [ ! -d "androidAssets" ]; then
    echo 'androidAssets folder did not generate'
    SOMETHING_FAILED=1
  fi
  # A failed android build will not exit with a non-zero return!
  # This makes it a bit trickier to test for - look for the fail message instead
  # Temporary disable this until we separate CI needs from here
  # cd ./android
  # ./gradlew assembleRelease | grep -q 'BUILD FAILED'
  # if [[ $? -eq 0 ]]; then
  #   echo 'Android build failed'
  #   SOMETHING_FAILED=1
  # fi
  # cd ..

  echo '~~~üåü Done'
  
  # Jump back into original directory
  cd $IGNITE_DIRECTORY
}

setup;

verify_code;

check_builds;

# Done
if [ "$SOMETHING_FAILED" != "0" ]; then
  echo "~~~üëé Done with errors";
  echo "$SOMETHING_FAILED";
  exit 1;
else
  echo "~~~üëç Everything looks good!";
  # depends on $SECONDS being part of sh
  printf '%dh:%dm:%ds\n' $(($SECONDS/3600)) $(($SECONDS%3600/60)) $(($SECONDS%60));
  exit 0;
fi
